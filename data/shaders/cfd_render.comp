#version 450

#include "common.glsl"

layout(binding = 2, rgba8) uniform writeonly image2D image;

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    uint index = gl_GlobalInvocationID.y * ubo.gridSize.x + gl_GlobalInvocationID.x;
    index = pc.readBufferOffset + index;

    // Load variables from the read buffer
    float density = data[index].density;
    float pressure = data[index].pressure;
    float temperature = data[index].temperature;
    float divergence = data[index].divergence;
    vec2 velocity = data[index].velocity;
    float gamma = 2.2;

    // calculate velocity magnitude
    float velocityMagnitude = length(data[index].velocity);

    // Normalize the variables to the range [0, 1]
    density = density / 1.0;
    // pressure = velocityMagnitude / 1000;
    velocity = velocity * 1.0;
    // temperature = temperature / 100;

    density = clamp(density, 0.0, 1.0);
    // pressure = clamp(pressure, 0.0, 1.0);
    temperature = clamp(temperature, 0.0, 1.0);
    divergence = divergence * 1000;
    pressure = pressure * 1;

    vec4 color = vec4(vec3(density), 1.0);

    color = vec4(pow(color.xyz, vec3(1.0 / gamma)), 1.0);

    // Store to image
    // imageStore(image, pos, vec4(density, pressure, temperature, 1.0));
    // imageStore(image, pos, vec4(vec2(density), pressure, 1.0));
    imageStore(image, pos, vec4(vec3(density), 1.0));
    // imageStore(image, pos, vec4(density, pressure, length(velocity) , 1.0));
    // imageStore(image, pos, vec4(abs(velocity), 0.0, 1.0));
    // imageStore(image, pos, vec4(vec3(pressure), 1.0));
    // imageStore(image, pos, vec4(vec2(data[index].velocity), 0.0, 1.0));
    // imageStore(image, pos, vec4(vec3(divergence), 1.0));
}
