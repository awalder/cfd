#version 450

#include "common.glsl"

// // Check if the cell is at the boundary
// if(pos.x == 0 || pos.x == ubo.gridSize.x - 1 || pos.y == 0 || pos.y == ubo.gridSize.y - 1)
// {
//     // Reflect the distribution functions
//     float tmp;
//     tmp = cell.distribution[1];
//     cell.distribution[1] = cell.distribution[3];
//     cell.distribution[3] = tmp;
//
//     tmp = cell.distribution[2];
//     cell.distribution[2] = cell.distribution[4];
//     cell.distribution[4] = tmp;
//
//     tmp = cell.distribution[5];
//     cell.distribution[5] = cell.distribution[7];
//     cell.distribution[7] = tmp;
//
//     tmp = cell.distribution[6];
//     cell.distribution[6] = cell.distribution[8];
//     cell.distribution[8] = tmp;
//
//     // Set the velocity to zero
//     cell.velocity = vec2(0.0);
// }

// Lattice velocities for each direction in the 2DQ9 model
const vec2 ei[9] = {
        vec2(0, 0),   // rest
        vec2(1, 0),   // right
        vec2(0, 1),   // top
        vec2(-1, 0),  // left
        vec2(0, -1),  // bottom
        vec2(1, 1),   // top-right
        vec2(-1, 1),  // top-left
        vec2(-1, -1), // bottom-left
        vec2(1, -1)   // bottom-right
};

// Weights for each direction in the 2DQ9 model
const float wi[9] = {
        4.0f / 9.0f,  // rest
        1.0f / 9.0f,  // right
        1.0f / 9.0f,  // top
        1.0f / 9.0f,  // left
        1.0f / 9.0f,  // bottom
        1.0f / 36.0f, // top-right
        1.0f / 36.0f, // top-left
        1.0f / 36.0f, // bottom-left
        1.0f / 36.0f  // bottom-right
};

float equilibrium_distribution(int i, vec2 u, float rho)
{
    float eu = dot(ei[i], u);
    float u2 = dot(u, u);
    float feq = wi[i] * rho * (1.0 + 3.0 * eu + 4.5 * eu * eu - 1.5 * u2);
    return feq;
}
void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    uint index = gl_GlobalInvocationID.y * ubo.gridSize.x + gl_GlobalInvocationID.x;
    uint readIndex = pc.readBufferOffset + index;
    uint writeIndex = pc.writeBufferOffset + index;

    if(pos.x >= ubo.gridSize.x || pos.y >= ubo.gridSize.y)
    {
        return;
    }

    GridCell cell = data[readIndex];

    // Check if the cell is inside the cylinder
    if(cell.solid == 1)
    {
        // Apply the bounce-back boundary condition
        float tmp;

        tmp = cell.distribution[1];
        cell.distribution[1] = cell.distribution[3];
        cell.distribution[3] = tmp;

        tmp = cell.distribution[2];
        cell.distribution[2] = cell.distribution[4];
        cell.distribution[4] = tmp;

        tmp = cell.distribution[5];
        cell.distribution[5] = cell.distribution[7];
        cell.distribution[7] = tmp;

        tmp = cell.distribution[6];
        cell.distribution[6] = cell.distribution[8];
        cell.distribution[8] = tmp;
    }
    // Check if the cell is at the left boundary
    if(pos.x == 0)
    {
        // Set the velocity to a non-zero value pointing to the right
        cell.velocity = vec2(1.5, 0.0);

        // Compute the distribution functions based on the new velocity and the desired density
        for(int i = 0; i < 9; ++i)
        {
            cell.distribution[i] = equilibrium_distribution(
                    i, cell.velocity, cell.density); // You need to define this function
        }
    }
    // Check if the cell is at the right boundary
    else if(pos.x == ubo.gridSize.x - 1)
    {
        // Copy the distribution functions from the interior cell
        ivec2 interiorPos = pos - ivec2(1, 0);
        uint interiorIndex = pc.readBufferOffset + interiorPos.y * ubo.gridSize.x + interiorPos.x;
        // GridCell interiorCell = getCell(pos, ivec(-1, 0));
        cell.distribution = data[interiorIndex].distribution;
    }
    // Check if the cell is at the top boundary
    if(pos.y == 0)
    {
        // Copy the distribution functions from the corresponding cell at the bottom boundary
        ivec2 bottomPos = pos + ivec2(0, ubo.gridSize.y - 1);
        uint bottomIndex = pc.readBufferOffset + bottomPos.y * ubo.gridSize.x + bottomPos.x;
        cell.distribution = data[bottomIndex].distribution;
    }
    // Check if the cell is at the bottom boundary
    else if(pos.y == ubo.gridSize.y - 1)
    {
        // Copy the distribution functions from the corresponding cell at the top boundary
        ivec2 topPos = pos - ivec2(0, ubo.gridSize.y - 1);
        uint topIndex = pc.readBufferOffset + topPos.y * ubo.gridSize.x + topPos.x;
        cell.distribution = data[topIndex].distribution;
    }

    // Write the updated cell back to the buffer
    data[writeIndex] = cell;
}

